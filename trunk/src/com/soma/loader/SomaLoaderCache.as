package com.soma.loader {	import flash.utils.Dictionary;			
	/**	 * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>	 * <b>Project host: </b><a href="http://code.google.com/p/somaloader/" target="_blank">http://code.google.com/p/somaloader/</a><br/>	 * <b>Class version:</b> 1.0.2<br/>	 * <b>Actionscript version:</b> 3.0</p>	 * <p><b>Copyright:</b></p>	 * <p>The contents of this file are subject to the Mozilla Public License<br />	 * Version 1.1 (the "License"); you may not use this file except in compliance<br />	 * with the License. You may obtain a copy of the License at<br /></p>	 * 	 * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>	 * 	 * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />	 * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />	 * See the License for the specific language governing rights and<br />	 * limitations under the License.<br /></p>	 * 	 * <p>The Original Code is SomaLoader.<br />	 * The Initial Developer of the Original Code is Romuald Quantin.<br />	 * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>	 * 	 * <p><b>Date:</b> 20 Feb 2009<br /></p>	 * <p><b>Usage:</b><br/>	 * @example	 * <listing version="3.0">	 * </listing>	 * 	 * @private	 */		internal class SomaLoaderCache {		//------------------------------------		// private, protected properties		//------------------------------------				private var _loader:SomaLoader;		private var _items:Dictionary;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				public function SomaLoaderCache(loader:SomaLoader) {			init(loader);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function init(loader:SomaLoader):void {			_loader = loader;			_items = new Dictionary();		}				// PUBLIC		//________________________________________________________________________________________________				public function add(item:SomaLoaderItem):Boolean {			try {				_items[item.url] = item;			} catch (e:Error) {				trace(e);			} finally {				return true;			}		}		public function removeByURL(url:String):Boolean {			if (_items[url] != undefined) {				delete _items[url];			}			return false;		}				public function removeByOwnKey(key:String, value:*):Boolean {			for each (var item:SomaLoaderItem in _items) {				if (item.data != null && Object(item.data).hasOwnProperty(key) && item.data[key] == value) {					delete _items[item.url];					return true;				}			}			return false;		}				public function getItems():Dictionary {			return _items;		}				public function getItemByURL(url:String):SomaLoaderItem {			if (_items[url] == undefined) return null;			else return _items[url];		}				public function getItemByOwnKey(key:String, value:*):SomaLoaderItem {			for each (var item:SomaLoaderItem in _items) {				if (item.data != null && Object(item.data).hasOwnProperty(key) && item.data[key] == value) {					return _items[item.url];				}			}			return null;		}				public function getBinaryLoadedItems(type:String = null):Array {			var binaryItems:Array = [];			for each (var item:SomaLoaderItem in _items) {				if (item.fileBinary != null) {					if (type == null) {						binaryItems.push(item);					}					else {						if (type != null && item.type == type)  binaryItems.push(item);					}				}			}			return binaryItems;		}				public function getBinaryLoadedItemByURL(url:String):SomaLoaderItem {			if (_items[url].fileBinary != null) return _items[url];			else return null;		}				public function getBinaryLoadedItemByOwnKey(key:String, value:*):SomaLoaderItem {			var binaryItems:Array = getBinaryLoadedItems();			var length:int = binaryItems.length;			for (var i:int=0; i<length; i++) {				if (binaryItems[i].data != null && binaryItems[i].data[key] == value) return binaryItems[i];			}			return null;		}				public function get length():int {			var count:int = 0;			for each (var item:SomaLoaderItem in _items) {				item;				count++;			}			return count;		}				public function dispose():void {			_items = new Dictionary();		}	}}