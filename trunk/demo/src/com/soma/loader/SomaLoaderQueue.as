package com.soma.loader {	import flash.display.DisplayObjectContainer;			/**	 * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>	 * <b>Project host: </b><a href="http://code.google.com/p/somaloader/" target="_blank">http://code.google.com/p/somaloader/</a><br/>	 * <b>Class version:</b> 1.0<br/>	 * <b>Actionscript version:</b> 3.0</p>	 * <p><b>Copyright:</b></p>	 * <p>The contents of this file are subject to the Mozilla Public License<br />	 * Version 1.1 (the "License"); you may not use this file except in compliance<br />	 * with the License. You may obtain a copy of the License at<br /></p>	 * 	 * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>	 * 	 * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />	 * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />	 * See the License for the specific language governing rights and<br />	 * limitations under the License.<br /></p>	 * 	 * <p>The Original Code is SomaLoader.<br />	 * The Initial Developer of the Original Code is Romuald Quantin.<br />	 * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>	 * 	 * <p><b>Date:</b> 20 Feb 2009<br /></p>	 * <p><b>Usage:</b><br/>	 * @example	 * <listing version="3.0">	 * </listing>	 * 	 * @private	 */		internal class SomaLoaderQueue {		//------------------------------------		// private, protected properties		//------------------------------------				private var _loader:SomaLoader;		private var _items:Array;		private var _currentItem:SomaLoaderItem;		private var _numItems:int;		private var _count:int;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				public function SomaLoaderQueue(loader:SomaLoader) {			init(loader);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function init(loader:SomaLoader):void {			_loader = loader;			_items = [];		}				private function addItem(url:String, index:int, binaryItem:SomaLoaderItem = null):SomaLoaderItem {			if (url != null && contains(url)) return null;			else {				var item:SomaLoaderItem = (binaryItem == null) ? createItem(url) : binaryItem;				return addSomaLoaderItem(item, index);			}		}				private function addSomaLoaderItem(item:SomaLoaderItem, index:int):SomaLoaderItem {			try {				if (index < 0) index = 0;				if (index > _items.length) index = _items.length;				if (_loader.status == SomaLoader.STATUS_LOADING && index == 0) throw new Error("Error in [SomaLoader]: you can't add an item at index 0 while it is currently loading.");				_items.splice(index, 0, item);			} catch (e:Error) {				if (SomaLoader.LOG_ERRORS) {					trace("Error in [SomaLoaderQueue]: unable to add the item: " + item.url);					trace(e);				}			} finally {				return item;			}		}		private function removeItem(url:String = null, index:int = -1):Boolean {			try {				if (url == null && index < 0) index = 0;				if (url == null && index > _items.length-1) index = _items.length-1;			} catch (e:Error) {				if (SomaLoader.LOG_ERRORS) {					trace("Error in [SomaLoaderQueue]: unable to remove the item: " + url);					trace(e);				}			} finally {				if (_loader.status == SomaLoader.STATUS_LOADING && _currentItem.url == url) return false;				if (_loader.status == SomaLoader.STATUS_LOADING && index == 0) throw new Error("Error in [SomaLoader]: you can't remove an item at index 0 while it is currently loading.");				if (_items.length == 0) return false;				var itemTarget:SomaLoaderItem = (url == null) ? _items[index] : getItem(url);				if (contains(itemTarget.url)) {					if (url != null) {						_items.splice(getIndex(url), 1);					}					else {						if (index == -1) return false;						_items.splice(index, 1);					}					return true;				}				else return false;			}		}				private function createItem(url:String):SomaLoaderItem {			return new SomaLoaderItem(url);		}				// PUBLIC		//________________________________________________________________________________________________				public function add(url:String, container:DisplayObjectContainer = null, type:String = null, data:* = null, dataFormat:String = null):SomaLoaderItem {			var item:SomaLoaderItem = addItem(url, _items.length);			if (item != null) {				item.loadingFromBinary = false;				if (container != null) item.container = container;				if (data != null) item.data = data;				if (dataFormat != null) item.dataFormat = dataFormat;				if (type != null) item.type = type;				if (_loader.status != SomaLoader.STATUS_STOPPED) {					_numItems++;				}			}			return item;		}				public function addAt(url:String, index:int, container:DisplayObjectContainer = null, type:String = null, data:* = null, dataFormat:String = null):SomaLoaderItem {			var item:SomaLoaderItem = addItem(url, index);			if (item != null) {				item.loadingFromBinary = false;				if (container != null) item.container = container;				if (data != null) item.data = data;				if (dataFormat != null) item.dataFormat = dataFormat;				if (type != null) item.type = type;				if (_loader.status != SomaLoader.STATUS_STOPPED) {					_numItems++;				}			}			return item;		}				public function addBinary(item:SomaLoaderItem, container:DisplayObjectContainer = null, data:* = null):SomaLoaderItem {			if (item == null) throw new Error("Error in [SomaLoader]: the binary item can't be null");			if (item.fileBinary == null) throw new Error("Error in [SomaLoader]: the fileBinary property of the SomaLoaderItem parameter is null, you must first load an asset with a dataFormat as URLLoaderDataFormat.BINARY");			var itemBinary:SomaLoaderItem = addItem(item.url, _items.length, item);			if (itemBinary != null) {				itemBinary.loadingFromBinary = true;				if (container != null) itemBinary.container = container;				if (data != null) itemBinary.data = data;				if (_loader.status != SomaLoader.STATUS_STOPPED) {					_numItems++;				}			}			return itemBinary;		}		public function addBinaryAt(item:SomaLoaderItem, index:int, container:DisplayObjectContainer = null, data:* = null):SomaLoaderItem {			if (item == null) throw new Error("Error in [SomaLoader]: the binary item can't be null");			if (item.fileBinary == null) throw new Error("Error in [SomaLoader]: the fileBinary property of the SomaLoaderItem parameter is null, you must first load an asset with a dataFormat as URLLoaderDataFormat.BINARY");			var itemBinary:SomaLoaderItem = addItem(item.url, index, item);			if (itemBinary != null) {				itemBinary.loadingFromBinary = true;				if (container != null) itemBinary.container = container;				if (data != null) itemBinary.data = data;				if (_loader.status != SomaLoader.STATUS_STOPPED) {					_numItems++;				}			}			return itemBinary;		}		public function remove(url:String):Boolean {			var result:Boolean = removeItem(url);			if (result) {				if (_loader.status != SomaLoader.STATUS_STOPPED) {					_numItems--;					_count = (_count-1 <= 0) ? 0 : _count--;				}			}			return result;		}				public function removeAt(index:int):Boolean {			var result:Boolean = removeItem(null, index);			if (result) {				if (_loader.status != SomaLoader.STATUS_STOPPED) {					_numItems--;					_count = (_count-1 < 0) ? 0 : _count--;				}			}			return result;		}				public function removeAll():Boolean {			var numRemoved:int = 0;			var length:int = _items.length;			for (var i:int=0; i<length; i++) {				if (_loader.status != SomaLoader.STATUS_STOPPED && i == 0) continue;				if (removeAt(i)) numRemoved++;			}			if (_loader.status != SomaLoader.STATUS_STOPPED) {				_numItems = _items.length;				_count = (_count-numRemoved < 0) ? 0 : _count-=numRemoved;			}			else _items = [];			if (numRemoved == 0) return false;			else return true;		}				public function contains(url:String):Boolean {			if (getItem(url) != null) return true;			else return false;		}				public function getItem(url:String):SomaLoaderItem {			var length:int = _items.length;			for (var i:int=0; i<length; i++) {				if (_items[i].url == url) return _items[i];			}			return null;		}		public function getItemAt(index:int):SomaLoaderItem {			return _items[index];		}		public function getLastItem():SomaLoaderItem {			if (_items.length == 0) return null;			else return _items[_items.length-1];		}		public function getIndex(url:String):int {			var length:int = _items.length;			for (var i:int=0; i<length; i++) {				if (_items[i].url == url) return i;			}			return -1;		}				public function setIndex(url:String, index:int):Boolean {			if (!contains(url)) return false;			if (_loader.status == SomaLoader.STATUS_LOADING && index == 0) return false;			var itemIndex:int = getIndex(url);			var item:SomaLoaderItem = _items[itemIndex].clone();			if (removeItem(url)) {				addSomaLoaderItem(item, index);				return true;			}			else return false;		}				public function reset():void {			_items = [];			_count = 0;			_currentItem = null;		}		public function get length():int {			return _items.length;		}				public function get items():Array {			return _items;		}				public function set items(items:Array):void {			_items = items;		}				public function get currentItem():SomaLoaderItem {			return _currentItem;		}				public function set currentItem(currentItem:SomaLoaderItem):void {			_currentItem = currentItem;		}				public function get numItems():int {			return _numItems;		}				public function set numItems(numItems:int):void {			_numItems = numItems;		}				public function get count():int {			return _count;		}				public function set count(count:int):void {			_count = count;		}			}}