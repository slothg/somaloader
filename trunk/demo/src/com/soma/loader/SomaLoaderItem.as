package com.soma.loader {	import flash.display.DisplayObjectContainer;
	import flash.net.URLLoaderDataFormat;
	import flash.net.URLRequest;
	import flash.net.URLVariables;
	import flash.utils.ByteArray;
	import flash.utils.Dictionary;import flash.net.registerClassAlias;import flash.utils.getDefinitionByName;import flash.utils.getQualifiedClassName;		
	/**	 * <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br/>	 * <b>Project host: </b><a href="http://code.google.com/p/somaloader/" target="_blank">http://code.google.com/p/somaloader/</a><br/>	 * <b>Class version:</b> 1.0<br/>	 * <b>Actionscript version:</b> 3.0</p>	 * <p><b>Copyright:</b></p>	 * <p>The contents of this file are subject to the Mozilla Public License<br />	 * Version 1.1 (the "License"); you may not use this file except in compliance<br />	 * with the License. You may obtain a copy of the License at<br /></p>	 * 	 * <p><a href="http://www.mozilla.org/MPL/" target="_blank">http://www.mozilla.org/MPL/</a><br /></p>	 * 	 * <p>Software distributed under the License is distributed on an "AS IS" basis,<br />	 * WITHOUT WARRANTY OF ANY KIND, either express or implied.<br />	 * See the License for the specific language governing rights and<br />	 * limitations under the License.<br /></p>	 * 	 * <p>The Original Code is SomaLoader.<br />	 * The Initial Developer of the Original Code is Romuald Quantin.<br />	 * Initial Developer are Copyright (C) 2008-2009 Soundstep. All Rights Reserved.</p>	 * 	 * <p><b>Date:</b> 20 Feb 2009<br /></p>	 * <p><b>Usage:</b><br/>	 * A SomaLoaderItem represents an item that will be loaded, it contains all the information of this item such as URL, files and properties.	 * An instance is created when you add an item in the SomaLoader instance, this item will be dispatched with SomaLoaderEvent events when it will be processed.</p>	 * @example	 * <listing version="3.0">	 * var loader:SomaLoader = new SomaLoader();	 * var item:SomaLoaderItem = loader.add("picture.jpg"):	 * </listing>	 * <p>To retrieve it from a listener:	 * @example	 * <listing version="3.0">	 * function itemComplete(event:SomaLoaderEvent):void {	 *     var item:SomaLoaderItem = event.item;	 * }	 * </listing>	 */		public class SomaLoaderItem {		//------------------------------------		// private, protected properties		//------------------------------------				private var _url:String;		private var _type:String;		private var _container:DisplayObjectContainer;		private var _file:*;		private var _fileBinary:ByteArray;		private var _fileFonts:Array;		private var _data:*;		private var _dataFormat:String;		private var _request:URLRequest;		private var _variables:URLVariables;		private var _fontNames:Array;				private var _fileProperties:Dictionary;		private var _containerProperties:Dictionary;				private var _loadingFromBinary:Boolean;		private var _cacheEnabled:Boolean;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				/** Instantiates a SomaLoaderItem		 * @param url URL of the item to load */		public function SomaLoaderItem(url:String) {			init(url);		}
		
		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function init(url:String):void {			_url = url;			_type = getType();			_request = new URLRequest(_url);			_fileProperties = new Dictionary(true);			_containerProperties = new Dictionary(true);			_loadingFromBinary = false;		}		private function getType():String {			var regExpBitmap:RegExp = /(.*?).(jpg|jpeg|png|gif)/i;			var regExpXML:RegExp = /(.*?).(xml)/i;			var regExpCSS:RegExp = /(.*?).(css)/i;			var regExpText:RegExp = /(.*?).(txt|rtf)/i;			var regExpSWF:RegExp = /(.*?).(swf)/i;			var regExpMP3:RegExp = /(.*?).(mp3)/i;			if (regExpBitmap.test(_url)) return SomaLoader.TYPE_BITMAP;			else if (regExpXML.test(_url)) return SomaLoader.TYPE_XML;			else if (regExpCSS.test(_url)) return SomaLoader.TYPE_CSS;			else if (regExpText.test(_url)) return SomaLoader.TYPE_TEXT;			else if (regExpSWF.test(_url)) return SomaLoader.TYPE_SWF;			else if (regExpMP3.test(_url)) return SomaLoader.TYPE_MP3;			else return SomaLoader.TYPE_UNKNOWN;		}				/** @private */		internal function setFile(file:*):void {			_file = file;		}				/** @private */		internal function setFileBinary(file:ByteArray):void {			_fileBinary = file;		}				/** @private */		internal function setFileFonts(fonts:Array):void {			_fileFonts = fonts;		}				/** @private */		internal function setFileProperties(properties:Dictionary):void {			_fileProperties = properties;		}				/** @private */		internal function setContainerProperties(properties:Dictionary):void {			_containerProperties = properties;		}				/** @private */		internal function applyFileProperties():void {			if (_file != null) {				setProperties(_file, _fileProperties);			}		}				/** @private */		internal function applyContainerProperties():void {			if (_container != null) {				setProperties(_container, _containerProperties);			}		}				/** @private */		private function setProperties(target:Object, dic:Dictionary):void {			try {				for (var prop:String in dic) {					if (target.hasOwnProperty(prop)) {						target[prop] = dic[prop];					}					else throw new Error(this);				}			} catch (err:Error) {				if (SomaLoader.LOG_ERRORS) {					trace("Error in [SomaLoaderItem]: unable to set the property: " + prop + " to " + target);					trace(err);				}			}		}				/** @private */		internal function get loadingFromBinary():Boolean {			return _loadingFromBinary;		}				internal function set loadingFromBinary(value:Boolean):void {			_loadingFromBinary = value;		}				internal function get fontNames():Array {			if (_fontNames == null) return null;			else return _fontNames.concat();		}				// PUBLIC		//________________________________________________________________________________________________				/** Returns the String of the URL of the item.		 * @return a URL */		public function get url():String {			return _url;		}				/** Returns a String describing the SomaLoaderItem instance.		 * @return a String. */		public function info():String {			var str:String = "[SomaLoaderItem]\n";			str += "url: " + _url + "\n";			str += "type: " + _type + "\n";			str += "request: " + _request + "\n";			str += "container: " + _container + "\n";			str += "file: " + _file + "\n";			str += "fileBinary: " + _fileBinary + "\n";			str += "fileFonts: " + _fileBinary + "\n";			str += "cacheEnabled: " + _cacheEnabled + "\n";			str += "data: " + _data + "\n";			str += "dataFormat: " + _dataFormat + "\n";			str += "variables: " + _variables + "\n";			str += "fileProperties: " + _fileProperties + "\n";			str += "containerProperties: " + _containerProperties + "\n";			return str;		}				public function cloneFile(source:*):* {			registerClassAlias(getQualifiedClassName(file), getDefinitionByName(getQualifiedClassName(file)) as Class);			var ba:ByteArray = new ByteArray();			ba.writeObject(source);			ba.position = 0;			return ba.readObject();		}				/** Type of the item, example: SomaLoader.TYPE_BITMAP. The type will be automatically found with the extension in the URL if possible.<br/>		 * The type can also be set when added to SomaLoader instance. */		public function get type():String {			return _type;		}				public function set type(value:String):void {			_type = value;		}				/** Container of the item. It is used to automatically add the item loaded to this container when possible.<br/>		 * Example if you load a picture and set a sprite to the container property, the Bitmap instance will be added to the sprite display list when the loading will be done.		 */		public function get container():DisplayObjectContainer {			return _container;		}				public function set container(target:DisplayObjectContainer):void {			_container = target;		}				/** Returns the data loaded from the URL of the item. For example it can be a Bitmap, a MovieClip, a XML, etc.		 * @return data loaded		 */		public function get file():* {			return _file;		}				/** Returns a Dictionary of properties. Those properties are applied to the file when the loading is complete.<br/>		 * Example: fileProperties["scaleX"] = .5;		 * @return a dictionary of properties		 */		public function get fileProperties():Dictionary {			return _fileProperties;		}				/** Add a property and a value to the file properties dictionary.		 * You can define properties and values that will be applied to the file when the loading is complete.<br/>		 * For example if you load a picture, you can add an scaleX property and its value. When the picture is loaded, the scaleX will be applied to it.		 * <listing version="3.0">		 * var item:SomaLoaderItem = loader.add("picture.jpg");		 * item.addFileProperty("scaleX", .5);		 * </listing>		 */		public function addFileProperty(property:String, value:*):void {			_fileProperties[property] = value;		}		/** Remove a property from the file properties dictionary. */		public function removeFileProperty(property:String):void {			if (_fileProperties[property] != undefined) {				delete _fileProperties[property];			}		}				/** Returns a Dictionary of properties. Relevant is a container has been specified, those properties are applied to the container of the file when the loading is complete.<br/>		 * Example: containerProperties["scaleX"] = .5;		 * @return a dictionary of properties		 */		public function get containerProperties():Dictionary {			return _containerProperties;		}				/** Add a property and a value to the container properties dictionary.		 * Relevant if a container has been set, You can define properties and values that will be applied to the container of the file when the loading is complete.<br/>		 * For example if you load a picture, create a sprite and set it as the container in the SomaLoaderItem, you can add an scaleX property and its value. When the picture is loaded, the bitmap wll be added to the sprite container and the scaleX will be applied to the container.		 * <listing version="3.0">		 * var item:SomaLoaderItem = loader.add("picture.jpg", mySprite);		 * item.addContainerProperty("scaleX", .5);		 * </listing>		 */		public function addContainerProperty(property:String, value:*):void {			_containerProperties[property] = value;		}				/** Remove a property from the container properties dictionary. */		public function removeContainerProperty(property:String):void {			if (_containerProperties[property] != undefined) {				delete _containerProperties[property];			}		}				/** Register an Array of font class names, to register them in the buit-in Font  class once loaded (Font.registerFont(FontClass)). Only necessary with Flash Player 9, this process is automatic with FLash player 10.		 * @param fontNames Array of font class names.		 */		public function registerFontClassName(fontNames:Array):void {			_fontNames = fontNames;		}				/** Custom Object. 		 * A custom Object can be used with a SomaLoaderItem instance, it can contain anything for your own use (a String, a Class, an Object, etc).		 * <listing version="3.0">		 * loader.add("picture.jpg", null, null, {id:"myID"});		 * </listing>		 */		public function get data():* {			return _data;		}				public function set data(data:*):void {			_data = data;		}				/** URLLoaderDataFormat value. 		 * When a URLLoader instance is used by SomaLoader to load an item, a dataFormat is set and can be changed with this property.<br/>		 * The default is URLLoaderDataFormat.TEXT and can also be URLLoaderDataFormat.BINARY and URLLoaderDataFormat.VARIABLES.<br/>		 * if you specify a URLLoaderDataFormat.BINARY when you load a picture or a SWF, the Bytes of the item will be loaded but no Bitmap or MovieClip will be created.<br/>		 * The Bytes will be set to the fileBinary property and you will be able to add later this item to the SomaLoader to create the Bitmap or MovieClip from the ByteArray stored.<br/><br/>		 * This functionality is useful for example when you load a lot of pictures and they are not displayed straight away, or for "silent loading". It is not as CPU intensive as it could be when the pictures are loaded with a flash.display.Loader instance.<br/><br/>		 * Later on, you can add this ByteArray item to the SomaLoader to create the Bitmap or MovieClip. It is treated as a loading but takes no time as the file is already loaded. You can then listen to the same event SomaLoaderEvent.COMPLETE event and retrieve the file that way.<br/>		 * It can be very efficient to load many portfolio containing many pictures.		 * <listing version="3.0">		 * var item:SomaLoaderItem = loader.add("picture.jpg");		 * item.dataFormat = URLLoaderDataFormat.BINARY;		 * </listing>		 * The Bytes will be set to item.fileBinary (ByteArray), then you can show the picture this way (treated as a loading but takes not time):		 * <listing version="3.0">		 * loader.addBinary(item);		 * loader.addEventListener(SomaLoaderEvent.COMPLETE, creationComplete);		 * loader.start();		 * function creationComplete(event:SomaLoaderEvent):void {		 *     var bitmap:Bitmap = event.item.file as Bitmap;		 *     addChild(bitmap);		 * }		 * </listing>		 */		public function get dataFormat():String {			return _dataFormat;		}				public function set dataFormat(value:String):void {			if (value != URLLoaderDataFormat.BINARY && value != URLLoaderDataFormat.TEXT && value != URLLoaderDataFormat.VARIABLES && value != null) {				throw new Error("Error in [SomaLoader]: the dataFormat of the SomaLoaderItem (url: " + _url + ") must be URLLoaderDataFormat.BINARY, URLLoaderDataFormat.TEXT or URLLoaderDataFormat.VARIABLES.");			}			_dataFormat = value;		}				/** Get the ByteArray of a file loaded with a dataFormat property set to Binary. */		public function get fileBinary():ByteArray {			return _fileBinary;		}				/** URLVariables instance used to send and load data. */		public function get variables():URLVariables {			return _variables;		}				public function set variables(value:URLVariables):void {			_variables = value;			if (_variables != null) {				dataFormat = URLLoaderDataFormat.VARIABLES;				request.data = _variables;			}		}				/** URLRequest instance used to load the item. The instance is automatically created by default but you can change its properties is needed. */		public function get request():URLRequest {			return _request;		}				public function set request(value:URLRequest):void {			if (value == null) throw new Error("Error in [SomaLoader]: the request of the SomaLoaderItem (url: " + _url + ") can't be null");			_request = value;		}				/** Get the list of the font loaded from a swf (SomaLoader.TYPE_FONT). */		public function get fileFonts():Array {			return _fileFonts;		}				/** Whether SomaLoader must cache the data loaded.		 * SomaLoader is using a cache system that will be transparent for the user. The cacheEnabled property is set by default to true when the item is created with the value from the static constant in SomaLoader: SomaLoader.DEFAULT_CACHE_ENABLED.<br/>		 * When the cache is set to true, Somaloader will dispatch the same events with the items already loaded. It is completely transparent and no conditions or changes are required from the user to get the file loaded from the cache or the server.<br/>		 * The cache will save you to make the same "calls" to the server and load the same data.		 */		public function get cacheEnabled():Boolean {			return _cacheEnabled;		}				public function set cacheEnabled(cacheEnabled:Boolean):void {			_cacheEnabled = cacheEnabled;		}
		
	}}